[{"id":0,"href":"/docs/notes/typescript/record/","title":"Record","section":"typescript学习笔记","content":" Record\u0026lt;Keys, Type\u0026gt; #   官方文档\n定义一个对象的key和value类型\n构造一个对象类型，其属性键为Keys，其属性值为Type。 此实用程序可用于将一种类型的属性映射到另一种类。\n接口 #  // 定义 // type Record\u0026lt;K extends keyof any, T\u0026gt; = { // [P in K]: T; // }; interface Person {  age: number  name: string } type School = \u0026#39;student\u0026#39; | \u0026#39;teacher\u0026#39; const school: Record\u0026lt;School, Person\u0026gt; = {  student: {  name: \u0026#39;tom\u0026#39;,  age: 12  },  teacher:{  name: \u0026#39;sam\u0026#39;,  age:20  } } 基础类型 #  type Num = \u0026#34;one\u0026#34; | \u0026#34;two\u0026#34;  const num: Record\u0026lt;Num, number\u0026gt; = {  one:1,  two:2 } "},{"id":1,"href":"/docs/notes/typescript/keyof/","title":"Keyof","section":"typescript学习笔记","content":"keyof #   官方文档\n该操作符用于获取某种类型的所有键,其返回的类型是联合类型\n获取类型 #  interface Ponit{  x:number  y:number }  type P = keyof Ponit // \u0026#39;x\u0026#39; | \u0026#39;y\u0026#39; 索引签名 #  type Arrayish = {  [n:number]: unknown } type A = keyof Arrayish // number 常用场景 #  定义一个函数，通过key来获取对象的值，通常我们并不知道对象包含的key集合\nfunction getObject\u0026lt;T extends object, K extends keyof T\u0026gt;(obj:T, key:K){  return obj[key] } const point = {  x: 12,  y:13 } getObject(point,\u0026#39;x\u0026#39;) getObject(point,\u0026#39;z\u0026#39;) //类型“\u0026#34;z\u0026#34;”的参数不能赋给类型“\u0026#34;x\u0026#34; | \u0026#34;y\u0026#34;”的参数。 "},{"id":2,"href":"/readbook/0501/","title":"记-浮生六记","section":"读书小计","content":"无人与我立黄昏，无人问我粥可温。\n无人与我捻熄灯，无人共我书半生。\n无人陪我夜已深，无人与我把酒分。\n无人拭我相思泪，无人梦我与前尘。\n无人陪我顾星辰，无人醒我茶已冷。\n无人听我述衷肠，无人解我心头梦。\n无人拘我言中泪，无人愁我独行路。\n回首向来萧瑟处，无人等在灯火阑珊处。\n 《浮生六记》- 沈复  "},{"id":3,"href":"/docs/notes/tools/git/","title":"git命令","section":"Tools","content":" 本地与远程的分支列表不一致(在gitlab管理界面删除分支之后) git remote update origin --prune  error: failed to push some refs to git pull --rebase origin master git push -u origin master  拉取git子模块 git submodule update --init --force   "},{"id":4,"href":"/docs/notes/tools/vim/","title":"vim常用命令","section":"Tools","content":"主要记录vim使用过程中的快捷键\n输入模式 #   i 切换输入模式 a 光标后插入 A 光标行尾插入 i 光标前插入 I 光标行首插入 o 打开向下打开新行 O 打开向上打开新行  esc #   退出模式  保存 #   w wq wq！ q! wq! (root 文件所有者可以操作)  快捷键 #   h 向左 j 向下 k 向上 l 向右 gg 文件头 G 文件尾  快速跳转 #   ^ 行首 $ 行尾 :n 跳到指定n 行 x 删除一个字母 xn 删除P指定n个字母 dd 删除单行 ndd 删除n行  剪切/粘贴/撤销 #   p 粘贴光标上面 P 粘贴光标下面 :n1,n2d 剪切多行 n行号 dG 先执行gg文件头 从光标删除到文件尾 u 撤销 一直到文件打开状态 control+r 反撤销  替换 #   r 替换单个 R 替换模式  查找 #   ? 光标向上 / 光标向下 n 下一个 N 上一个  其他 #   r 导入其他文件内容 :r abc.txt !命令 在vim执行系统命令 r !命令 导入命令的结果 map 自定义快捷键 o 上下打开多个文档  control+w 上下箭头 切换文件   O 左右打开多个文档  control+w 左右箭头 切换文件    "}]