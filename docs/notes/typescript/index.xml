<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>typescript学习笔记 on zggz Book</title>
    <link>https://zggz.github.io/docs/notes/typescript/</link>
    <description>Recent content in typescript学习笔记 on zggz Book</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://zggz.github.io/docs/notes/typescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Record</title>
      <link>https://zggz.github.io/docs/notes/typescript/record/</link>
      <pubDate>Sat, 30 Apr 2022 14:40:49 +0800</pubDate>
      
      <guid>https://zggz.github.io/docs/notes/typescript/record/</guid>
      <description>Record&amp;lt;Keys, Type&amp;gt; #   官方文档
定义一个对象的key和value类型
构造一个对象类型，其属性键为Keys，其属性值为Type。 此实用程序可用于将一种类型的属性映射到另一种类。</description>
    </item>
    
    <item>
      <title>Keyof</title>
      <link>https://zggz.github.io/docs/notes/typescript/keyof/</link>
      <pubDate>Sat, 07 May 2022 15:56:35 +0800</pubDate>
      
      <guid>https://zggz.github.io/docs/notes/typescript/keyof/</guid>
      <description>keyof #   官方文档
该操作符用于获取某种类型的所有键,其返回的类型是联合类型
获取类型 #  interface Ponit{  x:number  y:number }  type P = keyof Ponit // &amp;#39;x&amp;#39; | &amp;#39;y&amp;#39; 索引签名 #  type Arrayish = {  [n:number]: unknown } type A = keyof Arrayish // number 常用场景 #  定义一个函数，通过key来获取对象的值，通常我们并不知道对象包含的key集合</description>
    </item>
    
  </channel>
</rss>
